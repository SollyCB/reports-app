{"message":"type inside `async fn` body must be known in this context","code":{"code":"E0698","explanation":"When using generators (or async) all type variables must be bound so a\ngenerator can be constructed.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0698\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar().await; // error: cannot infer type for `T`\n}\n```\n\nIn the above example `T` is unknowable by the compiler.\nTo fix this you must bind `T` to a concrete type such as `String`\nso that a generator can then be constructed:\n\n```edition2018\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar::<String>().await;\n    //   ^^^^^^^^ specify type explicitly\n}\n```\n"},"level":"error","spans":[{"file_name":"backend/src/main.rs","byte_start":968,"byte_end":987,"line_start":40,"line_end":40,"column_start":20,"column_end":39,"is_primary":true,"text":[{"text":"    let response = HttpResponse::build(request).await;","highlight_start":20,"highlight_end":39}],"label":"cannot infer type for type parameter `T` declared on the associated function `build`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type is part of the `async fn` body because of this `await`","code":null,"level":"note","spans":[{"file_name":"backend/src/main.rs","byte_start":996,"byte_end":1002,"line_start":40,"line_end":40,"column_start":48,"column_end":54,"is_primary":true,"text":[{"text":"    let response = HttpResponse::build(request).await;","highlight_start":48,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"backend/src/main.rs","byte_start":996,"byte_end":1002,"line_start":40,"line_end":40,"column_start":48,"column_end":54,"is_primary":false,"text":[{"text":"    let response = HttpResponse::build(request).await;","highlight_start":48,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"backend/src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0698]\u001b[0m\u001b[0m\u001b[1m: type inside `async fn` body must be known in this context\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/main.rs:40:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let response = HttpResponse::build(request).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type parameter `T` declared on the associated function `build`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the type is part of the `async fn` body because of this `await`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/main.rs:40:48\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let response = HttpResponse::build(request).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0698`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0698`.\u001b[0m\n"}
